version: '3.8'

services:
  # ═══════════════════════════════════════════════════
  # Traefik Reverse Proxy
  # ═══════════════════════════════════════════════════
  traefik:
    image: traefik:v3.0
    container_name: hudu-mcp-traefik
    restart: unless-stopped

    command:
      # API and Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=true"  # Dashboard on :8080 (internal only)

      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"

      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      # Let's Encrypt (DNS-01 Challenge with Cloudflare)
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=30"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"

      # Logging
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--accesslog.format=json"

    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8080:8080"  # Traefik Dashboard (internal only)

    environment:
      # Cloudflare API credentials for DNS-01 challenge
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}

    volumes:
      # Docker socket for service discovery
      - /var/run/docker.sock:/var/run/docker.sock:ro

      # Let's Encrypt certificates storage
      - ./traefik/letsencrypt:/letsencrypt

      # Dynamic configuration
      - ./traefik/dynamic:/etc/traefik/dynamic:ro

      # Logs
      - ./logs/traefik:/var/log/traefik

    networks:
      - mcp-network

    labels:
      - "traefik.enable=true"

      # Dashboard router (internal access only)
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${MCP_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # ═══════════════════════════════════════════════════
  # OAuth2-Proxy (Azure AD Authentication)
  # ═══════════════════════════════════════════════════
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    container_name: hudu-mcp-oauth2-proxy
    restart: unless-stopped

    command:
      # Provider configuration
      - "--provider=oidc"
      - "--provider-display-name=Azure AD"
      - "--oidc-issuer-url=https://login.microsoftonline.com/${AZURE_TENANT_ID}/v2.0"
      - "--client-id=${AZURE_CLIENT_ID}"
      - "--client-secret=${AZURE_CLIENT_SECRET}"
      - "--redirect-url=https://${MCP_HOSTNAME}/oauth2/callback"

      # Cookie configuration
      - "--cookie-name=_oauth2_proxy"
      - "--cookie-secret=${OAUTH2_COOKIE_SECRET}"
      - "--cookie-secure=true"
      - "--cookie-httponly=true"
      - "--cookie-samesite=lax"
      - "--cookie-expire=${OAUTH2_COOKIE_EXPIRE:-168h}"
      - "--cookie-refresh=${OAUTH2_COOKIE_REFRESH:-1h}"
      - "--cookie-domain=${MCP_HOSTNAME}"

      # Session configuration
      - "--session-store-type=cookie"

      # Email validation
      - "--email-domain=${OAUTH2_EMAIL_DOMAINS}"
      - "--skip-provider-button=true"

      # Upstream configuration
      - "--http-address=0.0.0.0:4180"
      - "--upstream=http://hudu-mcp-server:3050"

      # Reverse proxy configuration
      - "--reverse-proxy=true"
      - "--real-client-ip-header=X-Forwarded-For"

      # Pass user information to upstream
      - "--pass-access-token=true"
      - "--pass-authorization-header=true"
      - "--pass-user-headers=true"
      - "--set-xauthrequest=true"
      - "--set-authorization-header=true"

      # Logging
      - "--logging-filename="
      - "--logging-local-time=false"
      - "--standard-logging=true"
      - "--auth-logging=true"
      - "--request-logging=true"

      # Scopes
      - "--scope=openid profile email"
      - "--oidc-groups-claim=groups"

      # Allow API requests with Bearer tokens (for Claude Desktop)
      - "--skip-auth-regex=^/mcp"
      - "--skip-jwt-bearer-tokens=true"

    environment:
      - OAUTH2_PROXY_CLIENT_ID=${AZURE_CLIENT_ID}
      - OAUTH2_PROXY_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - OAUTH2_PROXY_COOKIE_SECRET=${OAUTH2_COOKIE_SECRET}

    networks:
      - mcp-network

    labels:
      - "traefik.enable=true"

      # OAuth2-Proxy router
      - "traefik.http.routers.oauth2-proxy.rule=Host(`${MCP_HOSTNAME}`) && PathPrefix(`/oauth2`)"
      - "traefik.http.routers.oauth2-proxy.entrypoints=websecure"
      - "traefik.http.routers.oauth2-proxy.tls.certresolver=letsencrypt"
      - "traefik.http.routers.oauth2-proxy.service=oauth2-proxy"
      - "traefik.http.services.oauth2-proxy.loadbalancer.server.port=4180"

      # ForwardAuth middleware
      - "traefik.http.middlewares.oauth2-auth.forwardauth.address=http://oauth2-proxy:4180/oauth2/auth"
      - "traefik.http.middlewares.oauth2-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.oauth2-auth.forwardauth.authResponseHeaders=X-Auth-Request-User,X-Auth-Request-Email,X-Auth-Request-Access-Token,Authorization"

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4180/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # ═══════════════════════════════════════════════════
  # Hudu MCP Server (with OAuth user context)
  # ═══════════════════════════════════════════════════
  hudu-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hudu-mcp-server
    restart: unless-stopped

    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - HUDU_BASE_URL=${HUDU_BASE_URL}
      - HUDU_API_KEY=${HUDU_API_KEY}
      - HUDU_TIMEOUT=${HUDU_TIMEOUT:-30000}
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-3050}
      # OAuth is handled by oauth2-proxy, MCP server receives user headers
      - OAUTH_ENABLED=true

    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro

    networks:
      - mcp-network

    labels:
      - "traefik.enable=true"

      # MCP Server router (protected by OAuth2-Proxy)
      - "traefik.http.routers.hudu-mcp.rule=Host(`${MCP_HOSTNAME}`) && (PathPrefix(`/mcp`) || Path(`/health`) || Path(`/`))"
      - "traefik.http.routers.hudu-mcp.entrypoints=websecure"
      - "traefik.http.routers.hudu-mcp.tls.certresolver=letsencrypt"
      - "traefik.http.routers.hudu-mcp.middlewares=oauth2-auth,security-headers,rate-limit"
      - "traefik.http.routers.hudu-mcp.service=hudu-mcp"
      - "traefik.http.services.hudu-mcp.loadbalancer.server.port=3050"

      # Security headers middleware
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.Referrer-Policy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.security-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.security-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stspreload=true"
      - "traefik.http.middlewares.security-headers.headers.stsseconds=31536000"

      # Rate limiting middleware (1000 requests per 15 minutes per IP)
      - "traefik.http.middlewares.rate-limit.ratelimit.average=67"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=100"
      - "traefik.http.middlewares.rate-limit.ratelimit.period=1m"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"

  # ═══════════════════════════════════════════════════
  # Token Portal (Self-Service Token Generation)
  # ═══════════════════════════════════════════════════
  token-portal:
    build:
      context: ./token-portal
      dockerfile: Dockerfile
    container_name: hudu-mcp-token-portal
    restart: unless-stopped

    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - MCP_HOSTNAME=${MCP_HOSTNAME}

    networks:
      - mcp-network

    labels:
      - "traefik.enable=true"

      # Token portal router (protected by OAuth2-Proxy)
      - "traefik.http.routers.token-portal.rule=Host(`${MCP_HOSTNAME}`) && Path(`/token`)"
      - "traefik.http.routers.token-portal.entrypoints=websecure"
      - "traefik.http.routers.token-portal.tls.certresolver=letsencrypt"
      - "traefik.http.routers.token-portal.middlewares=oauth2-auth,security-headers"
      - "traefik.http.routers.token-portal.service=token-portal"
      - "traefik.http.services.token-portal.loadbalancer.server.port=3000"

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
